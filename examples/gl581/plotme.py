#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
plotme.py
---------

This is an example python script used to customize a figure
generated by VPLOT. Instead of running ``vplot`` on the command
line, run this script for a fully customized figure:

>>> python plotme.py

'''

# Import ``vplot`` and our the ``pyplot`` plotting 
# module
import matplotlib.pyplot as pl
import vplot

# Get the figure object and array of axis instances
# with a call to the ``Plot()`` method
fig, ax = vplot.Plot()

# Change the title of the plot
fig.suptitle('Whoa! VPLOT is AWESOME', fontsize = 24)

# Increase horizontal (width) padding between subplots 
# for a better fit
fig.subplots_adjust(wspace = 0.75)

# Change the units on Flux and Luminosity by tweaking 
# the y axis labels
ax[2].set_ylabel('Flux (pirate-ninjas)')
ax[6].set_ylabel('Luminosity (crazy units)')

# Change the x axis scale of the second subplot 
# (eccentricity) for better visibility
ax[1].set_xscale('Linear')

# Now make the tick label font size smaller for that 
# subplot so that they don't overlap
for tick in ax[1].xaxis.get_major_ticks():
  tick.label.set_fontsize(8) 
  
# While we are at it, make the legend smaller 
ax[1].legend(fontsize = 6, loc = 'upper right')

# Add a horizontal line to the Core Temperature
# subplot to indicate an interesting transition
ax[14].axhline(5980, color = 'r', ls = '--')

# Change the line style of the TGlobal curve...
ax[15].lines[0].set_color('k')
ax[15].lines[0].set_linestyle('--')

# ... and update it in the legend!
leg = ax[15].legend(fontsize = 8, loc = 'upper left')
leg.legendHandles[0].set_color('k')
leg.legendHandles[0].set_linestyle('--')

# Scale the data in the Surface Water subplot
# We're essentially doing a unit transformation from TO
# to kg.
x, y = ax[13].lines[0].get_data()
y *= 1.39e21
ax[13].lines[0].set_data(x,y)

# Make sure to change the y axis limits...
ax[13].set_ylim(0,1.5e21)

# ... as well as the label
ax[13].set_ylabel('Surface Water (kg)')

# Finally, a little hack to prevent plotting an offset 
# at the top left corner of the plot
ax[13].set_yticklabels(ax[13].get_yticks())

# Show the resulting figure
# Note that alternatively, you can save it with
# >>> fig.savefig('figure.png', bbox_inches = 'tight')
pl.show()